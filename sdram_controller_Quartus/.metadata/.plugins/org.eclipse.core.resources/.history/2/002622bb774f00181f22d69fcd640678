/* 
 * "Small Hello World" example. 
 * 
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example 
 * designs. It requires a STDOUT  device in your system's hardware. 
 *
 * The purpose of this example is to demonstrate the smallest possible Hello 
 * World application, using the Nios II HAL library.  The memory footprint
 * of this hosted application is ~332 bytes by default using the standard 
 * reference design.  For a more fully featured Hello World application
 * example, see the example titled "Hello World".
 *
 * The memory footprint of this example has been reduced by making the
 * following changes to the normal "Hello World" example.
 * Check in the Nios II Software Developers Manual for a more complete 
 * description.
 * 
 * In the SW Application project (small_hello_world):
 *
 *  - In the C/C++ Build page
 * 
 *    - Set the Optimization Level to -Os
 * 
 * In System Library project (small_hello_world_syslib):
 *  - In the C/C++ Build page
 * 
 *    - Set the Optimization Level to -Os
 * 
 *    - Define the preprocessor option ALT_NO_INSTRUCTION_EMULATION 
 *      This removes software exception handling, which means that you cannot 
 *      run code compiled for Nios II cpu with a hardware multiplier on a core 
 *      without a the multiply unit. Check the Nios II Software Developers 
 *      Manual for more details.
 *
 *  - In the System Library page:
 *    - Set Periodic system timer and Timestamp timer to none
 *      This prevents the automatic inclusion of the timer driver.
 *
 *    - Set Max file descriptors to 4
 *      This reduces the size of the file handle pool.
 *
 *    - Check Main function does not exit
 *    - Uncheck Clean exit (flush buffers)
 *      This removes the unneeded call to exit when main returns, since it
 *      won't.
 *
 *    - Check Don't use C++
 *      This builds without the C++ support code.
 *
 *    - Check Small C library
 *      This uses a reduced functionality C library, which lacks  
 *      support for buffering, file IO, floating point and getch(), etc. 
 *      Check the Nios II Software Developers Manual for a complete list.
 *
 *    - Check Reduced device drivers
 *      This uses reduced functionality drivers if they're available. For the
 *      standard design this means you get polled UART and JTAG UART drivers,
 *      no support for the LCD driver and you lose the ability to program 
 *      CFI compliant flash devices.
 *
 *    - Check Access device drivers directly
 *      This bypasses the device file system to access device drivers directly.
 *      This eliminates the space required for the device file system services.
 *      It also provides a HAL version of libc services that access the drivers
 *      directly, further reducing space. Only a limited number of libc
 *      functions are available in this configuration.
 *
 *    - Use ALT versions of stdio routines:
 *
 *           Function                  Description
 *        ===============  =====================================
 *        alt_printf       Only supports %s, %x, and %c ( < 1 Kbyte)
 *        alt_putstr       Smaller overhead than puts with direct drivers
 *                         Note this function doesn't add a newline.
 *        alt_putchar      Smaller overhead than putchar with direct drivers
 *        alt_getchar      Smaller overhead than getchar with direct drivers
 *
 */

#include "sys/alt_stdio.h"
#include "system.h"
#include "io.h"
#include <stdio.h>

int main()
{ 
  alt_putstr("Hello from Nios II!\n");
 short data0 = 0x0000;
 short data1 = 0x1111;
 short data2 = 0x2222;
 short data3 = 0x3333;
 short data4 = 0x4444;
 short data5 = 0x5555;
 short data6 = 0x6666;
 short data7 = 0x7777;
 short data8 = 0x8888;
 short data9 = 0x9999;
 short data10 =0xAAAA;
 short data11 =0xBBBB;
 short data12 =0xCCCC;
 short data13 =0xDDDD;
 short data14 =0xEEEE;
 short data15 =0xFFFF;
 short data16 =0x1234;
 short data17=0x347AE;

 //problem cases noticed:

 IOWR_16DIRECT(MY_SDRAM_0_BASE,0, data0);
 printf("Writing [0x%x] to address0 register.\n", data0);
 printf ("read:0 = [0x%0x ]\n", IORD_16DIRECT (MY_SDRAM_0_BASE, 0));

 IOWR_16DIRECT(MY_SDRAM_0_BASE, 1, data1);
 printf("Writing [0x%x] to address1 register.\n", data1);
 printf ("read:1 = [0x%0x]\n", IORD_16DIRECT (MY_SDRAM_0_BASE, 1));

 IOWR_16DIRECT(MY_SDRAM_0_BASE,0, data0);
 printf("Writing [0x%x] to address0 register.\n", data16);
 printf (" read:address0 = [0x%0x]\n", IORD_16DIRECT (MY_SDRAM_0_BASE, 0));
 printf (" read:address1 = [0x%0x]\n", IORD_16DIRECT (MY_SDRAM_0_BASE, 1));


 //consecutive read and write operation

 IOWR_16DIRECT(MY_SDRAM_0_BASE, 20, data2);
 printf("Writing [0x%x] to data2 register.\n", data2);
  printf (" read:address20= [0x%0x]\n", IORD_16DIRECT (MY_SDRAM_0_BASE, 20));

 IOWR_16DIRECT(MY_SDRAM_0_BASE, 30, data3);
 printf("Writing [0x%x] to data3 register.\n", data3);
 printf ("read:address30 = [0x%0x]\n", IORD_16DIRECT (MY_SDRAM_0_BASE, 30));

 IOWR_16DIRECT(MY_SDRAM_0_BASE, 21, data2);
 printf("Writing [0x%x] to address21 register.\n", data4);
 printf (" read:address21= [0x%0x]\n", IORD_16DIRECT (MY_SDRAM_0_BASE, 21));

  IOWR_16DIRECT(MY_SDRAM_0_BASE, 22, data3);
  printf("Writing [0x%x] to data22 register.\n", data5);
  printf ("read:address22 = [0x%0x]\n", IORD_16DIRECT (MY_SDRAM_0_BASE, 22));

  IOWR_16DIRECT(MY_SDRAM_0_BASE, 2559, data2);
   printf("Writing [0x%x] to address2559 register.\n", data6);
    printf (" read:address2559= [0x%0x]\n", IORD_16DIRECT (MY_SDRAM_0_BASE, 2559));

   IOWR_16DIRECT(MY_SDRAM_0_BASE, 359875, data3);
   printf("Writing [0x%x] to address359875 register.\n", data7);
   printf ("read:address359875 = [0x%0x]\n", IORD_16DIRECT (MY_SDRAM_0_BASE, 359875));

   //reading all previous written data continuosly

   printf (" read:address20= [0x%0x]\n", IORD_16DIRECT (MY_SDRAM_0_BASE, 20));
   printf ("read:address30 = [0x%0x]\n", IORD_16DIRECT (MY_SDRAM_0_BASE, 30));
   printf (" read:address21= [0x%0x]\n", IORD_16DIRECT (MY_SDRAM_0_BASE, 21));
   printf ("read:address22 = [0x%0x]\n", IORD_16DIRECT (MY_SDRAM_0_BASE, 22));
   printf (" read:address2559= [0x%0x]\n", IORD_16DIRECT (MY_SDRAM_0_BASE, 2559));
   printf ("read:address359875 = [0x%0x]\n", IORD_16DIRECT (MY_SDRAM_0_BASE, 359875));

 IOWR_16DIRECT(MY_SDRAM_0_BASE, 4, data4);
 printf("Writing [0x%x] to data4 register.\n", data4);
 printf ("read3 = [0x%0x]\n", IORD_16DIRECT (MY_SDRAM_0_BASE, 3));
 printf ("read2 = [0x%0x]\n", IORD_16DIRECT (MY_SDRAM_0_BASE, 2));
 printf ("read4 = [0x%0x]\n", IORD_16DIRECT (MY_SDRAM_0_BASE, 4));

 IOWR_16DIRECT(MY_SDRAM_0_BASE, 5, data5);

      IOWR_16DIRECT(MY_SDRAM_0_BASE, 8, data2);
      usleep();
      IOWR_16DIRECT(MY_SDRAM_0_BASE, 5, data1);
      usleep();
      IOWR_16DIRECT(MY_SDRAM_0_BASE, 10, data3);
      IOWR_16DIRECT(MY_SDRAM_0_BASE, 7, data8);

      //printf ("Writing [0x%x] to operand B register.\n", operandB);



      printf ("5 = [0x%0x]\n", IORD_16DIRECT (MY_SDRAM_0_BASE, 5));
      usleep();
      printf ("8 = [0x%0x]\n", IORD_16DIRECT (MY_SDRAM_0_BASE, 8));
      usleep();
      printf ("7 = [0x%0x]\n", IORD_16DIRECT (MY_SDRAM_0_BASE, 7));
      //printf ("8 = [0x%0x]\n", IORD_16DIRECT (MY_SDRAM_0_BASE, 8));
      printf ("10 = [0x%0x]\n", IORD_16DIRECT (MY_SDRAM_0_BASE, 10));


      IOWR_16DIRECT(MY_SDRAM_0_BASE, 1, data4);
      IOWR_16DIRECT(MY_SDRAM_0_BASE, 2, data3);
      IOWR_16DIRECT(MY_SDRAM_0_BASE, 4, data2);
      IOWR_16DIRECT(MY_SDRAM_0_BASE, 3, data1);
      printf ("1 = [0x%0x]\n", IORD_16DIRECT (MY_SDRAM_0_BASE, 1));
      printf ("2 = [0x%0x]\n", IORD_16DIRECT (MY_SDRAM_0_BASE, 2));
      printf ("4 = [0x%0x]\n", IORD_16DIRECT (MY_SDRAM_0_BASE, 4));
      printf ("3 = [0x%0x]\n", IORD_16DIRECT (MY_SDRAM_0_BASE, 3));
      printf ("0 = [0x%0x]\n", IORD_16DIRECT (MY_SDRAM_0_BASE, 0));

      IOWR_16DIRECT(MY_SDRAM_0_BASE, 1, data1);
      IOWR_16DIRECT(MY_SDRAM_0_BASE, 2, data2);
      IOWR_16DIRECT(MY_SDRAM_0_BASE, 3, data3);
      IOWR_16DIRECT(MY_SDRAM_0_BASE, 3, data4);
      printf ("1 = [0x%0x]\n", IORD_16DIRECT (MY_SDRAM_0_BASE, 1));
      printf ("4 = [0x%0x]\n", IORD_16DIRECT (MY_SDRAM_0_BASE, 4));
      printf ("3 = [0x%0x]\n", IORD_16DIRECT (MY_SDRAM_0_BASE, 3));
      printf ("2 = [0x%0x]\n", IORD_16DIRECT (MY_SDRAM_0_BASE, 2));

  /* Event loop never exits. */
  while (1);

  return 0;
}
