
sdram_software.elf:     file format elf32-littlenios2
sdram_software.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04008020

Program Header:
    LOAD off    0x00001000 vaddr 0x04008000 paddr 0x04008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04008020 paddr 0x04008020 align 2**12
         filesz 0x000013b8 memsz 0x000013b8 flags r-x
    LOAD off    0x000023d8 vaddr 0x040093d8 paddr 0x040094c8 align 2**12
         filesz 0x000000f0 memsz 0x000000f0 flags rw-
    LOAD off    0x000025b8 vaddr 0x040095b8 paddr 0x040095b8 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04008000  04008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  04008020  04008020  000024c8  2**0
                  CONTENTS
  2 .text         00000f24  04008020  04008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000494  04008f44  04008f44  00001f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f0  040093d8  040094c8  000023d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  040095b8  040095b8  000025b8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  040095c8  040095c8  000024c8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000024c8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000002a8  00000000  00000000  000024f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00003a2e  00000000  00000000  00002798  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000012f9  00000000  00000000  000061c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001616  00000000  00000000  000074bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000039c  00000000  00000000  00008ad8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000fdb  00000000  00000000  00008e74  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001300  00000000  00000000  00009e4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0000b150  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000220  00000000  00000000  0000b160  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000c3ea  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0000c3ed  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000c3f9  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000c3fa  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0000c3fb  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0000c406  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0000c411  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000f  00000000  00000000  0000c41c  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000027  00000000  00000000  0000c42b  2**0
                  CONTENTS, READONLY
 26 .jdi          000055fb  00000000  00000000  0000c452  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00040b66  00000000  00000000  00011a4d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04008000 l    d  .entry	00000000 .entry
04008020 l    d  .exceptions	00000000 .exceptions
04008020 l    d  .text	00000000 .text
04008f44 l    d  .rodata	00000000 .rodata
040093d8 l    d  .rwdata	00000000 .rwdata
040095b8 l    d  .bss	00000000 .bss
040095c8 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../sdram_software_bsp//obj/HAL/src/crt0.o
04008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
0400847c l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
040093d8 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
04008e18 g     F .text	0000002c alt_main
040094c8 g       *ABS*	00000000 __flash_rwdata_start
04008430 g     F .text	0000004c printf
04008e44 g     F .text	00000038 alt_putstr
04008f3c g     F .text	00000008 altera_nios2_gen2_irq_init
04008000 g     F .entry	0000000c __reset
04008020 g       *ABS*	00000000 __flash_exceptions_start
040095b8 g     O .bss	00000004 errno
040095c0 g     O .bss	00000004 alt_argv
040114b8 g       *ABS*	00000000 _gp
040083f4 g     F .text	0000003c _printf_r
04008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
04008c54 g     F .text	00000064 .hidden __udivsi3
040094b8 g     O .rwdata	00000004 _global_impure_ptr
040095c8 g       *ABS*	00000000 __bss_end
04008f34 g     F .text	00000004 alt_dcache_flush_all
040094c8 g       *ABS*	00000000 __ram_rwdata_end
04008e7c g     F .text	00000060 write
040093d8 g       *ABS*	00000000 __ram_rodata_end
040094c0 g     O .rwdata	00000004 jtag_uart_0
04008cb8 g     F .text	00000058 .hidden __umodsi3
040095c8 g       *ABS*	00000000 end
04010000 g       *ABS*	00000000 __alt_stack_pointer
04008f00 g     F .text	00000034 altera_avalon_jtag_uart_write
040084e8 g     F .text	0000052c ___vfprintf_internal_r
04008020 g     F .text	0000003c _start
04008efc g     F .text	00000004 alt_sys_init
04008d10 g     F .text	00000028 .hidden __mulsi3
040093d8 g       *ABS*	00000000 __ram_rwdata_start
04008f44 g       *ABS*	00000000 __ram_rodata_start
040095c8 g       *ABS*	00000000 __alt_stack_base
04008a30 g     F .text	000000b8 __sfvwrite_small_dev
040095b8 g       *ABS*	00000000 __bss_start
0400805c g     F .text	00000398 main
040095bc g     O .bss	00000004 alt_envp
040094c4 g     O .rwdata	00000004 alt_errno
04008b5c g     F .text	00000084 .hidden __divsi3
04008f44 g       *ABS*	00000000 __flash_rodata_start
04008edc g     F .text	00000020 alt_irq_init
04008b04 g     F .text	00000058 _write_r
040094bc g     O .rwdata	00000004 _impure_ptr
040095c4 g     O .bss	00000004 alt_argc
04008020 g       *ABS*	00000000 __ram_exceptions_start
040094c8 g       *ABS*	00000000 _edata
040095c8 g       *ABS*	00000000 _end
04008020 g       *ABS*	00000000 __ram_exceptions_end
04008be0 g     F .text	00000074 .hidden __modsi3
04010000 g       *ABS*	00000000 __alt_data_end
0400800c g       .entry	00000000 _exit
04008ae8 g     F .text	0000001c strlen
04008f38 g     F .text	00000004 alt_icache_flush_all
04008a14 g     F .text	0000001c __vfprintf_internal
04008d38 g     F .text	000000e0 alt_load



Disassembly of section .entry:

04008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4008000:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4008004:	08600814 	ori	at,at,32800
    jmp r1
 4008008:	0800683a 	jmp	at

0400800c <_exit>:
	...

Disassembly of section .text:

04008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4008020:	06c10074 	movhi	sp,1025
    ori sp, sp, %lo(__alt_stack_pointer)
 4008024:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 4008028:	06810074 	movhi	gp,1025
    ori gp, gp, %lo(_gp)
 400802c:	d6852e14 	ori	gp,gp,5304
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4008030:	00810034 	movhi	r2,1024
    ori r2, r2, %lo(__bss_start)
 4008034:	10a56e14 	ori	r2,r2,38328

    movhi r3, %hi(__bss_end)
 4008038:	00c10034 	movhi	r3,1024
    ori r3, r3, %lo(__bss_end)
 400803c:	18e57214 	ori	r3,r3,38344

    beq r2, r3, 1f
 4008040:	10c00326 	beq	r2,r3,4008050 <_start+0x30>

0:
    stw zero, (r2)
 4008044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 4008048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 400804c:	10fffd36 	bltu	r2,r3,4008044 <_gp+0xffff6b8c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4008050:	4008d380 	call	4008d38 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4008054:	4008e180 	call	4008e18 <alt_main>

04008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 4008058:	003fff06 	br	4008058 <_gp+0xffff6ba0>

0400805c <main>:
#include "io.h"
#include <stdio.h>

int main()
{ 
  alt_putstr("Hello from Nios II!\n");
 400805c:	01010074 	movhi	r4,1025
#include "system.h"
#include "io.h"
#include <stdio.h>

int main()
{ 
 4008060:	defff904 	addi	sp,sp,-28
  alt_putstr("Hello from Nios II!\n");
 4008064:	2123d104 	addi	r4,r4,-28860
#include "system.h"
#include "io.h"
#include <stdio.h>

int main()
{ 
 4008068:	dc000015 	stw	r16,0(sp)
 400806c:	dfc00615 	stw	ra,24(sp)
 4008070:	dd400515 	stw	r21,20(sp)
 4008074:	dd000415 	stw	r20,16(sp)
 4008078:	dcc00315 	stw	r19,12(sp)
 400807c:	dc800215 	stw	r18,8(sp)
 4008080:	dc400115 	stw	r17,4(sp)
 short data16 =0x1234;
 short data17=0x347AE;

 //problem cases noticed:

 IOWR_16DIRECT(MY_SDRAM_0_BASE,0, data0);
 4008084:	04008034 	movhi	r16,512
#include "io.h"
#include <stdio.h>

int main()
{ 
  alt_putstr("Hello from Nios II!\n");
 4008088:	4008e440 	call	4008e44 <alt_putstr>
 short data16 =0x1234;
 short data17=0x347AE;

 //problem cases noticed:

 IOWR_16DIRECT(MY_SDRAM_0_BASE,0, data0);
 400808c:	8000002d 	sthio	zero,0(r16)
 printf("Writing [0x%x] to address0 register.\n", data0);
 4008090:	01010074 	movhi	r4,1025
 4008094:	000b883a 	mov	r5,zero
 4008098:	2123d704 	addi	r4,r4,-28836
 400809c:	40084300 	call	4008430 <printf>
 printf ("read:0 = [0x%0x ]\n", IORD_16DIRECT (MY_SDRAM_0_BASE, 0));
 40080a0:	8140002b 	ldhuio	r5,0(r16)
 40080a4:	01010074 	movhi	r4,1025
 40080a8:	297fffcc 	andi	r5,r5,65535
 40080ac:	2123e104 	addi	r4,r4,-28796
 40080b0:	40084300 	call	4008430 <printf>

 IOWR_16DIRECT(MY_SDRAM_0_BASE, 1, data1);
 40080b4:	84400044 	addi	r17,r16,1
 40080b8:	00844444 	movi	r2,4369
 40080bc:	8880002d 	sthio	r2,0(r17)
 printf("Writing [0x%x] to address1 register.\n", data1);
 40080c0:	01010074 	movhi	r4,1025
 40080c4:	01444444 	movi	r5,4369
 40080c8:	2123e604 	addi	r4,r4,-28776
 40080cc:	40084300 	call	4008430 <printf>
 printf ("read:1 = [0x%0x]\n", IORD_16DIRECT (MY_SDRAM_0_BASE, 1));
 40080d0:	8940002b 	ldhuio	r5,0(r17)
 40080d4:	01010074 	movhi	r4,1025
 40080d8:	297fffcc 	andi	r5,r5,65535
 40080dc:	2123f004 	addi	r4,r4,-28736
 40080e0:	40084300 	call	4008430 <printf>

 IOWR_16DIRECT(MY_SDRAM_0_BASE,0, data0);
 40080e4:	8000002d 	sthio	zero,0(r16)
 printf("Writing [0x%x] to address0 register.\n", data16);
 40080e8:	01010074 	movhi	r4,1025
 40080ec:	01448d04 	movi	r5,4660
 40080f0:	2123d704 	addi	r4,r4,-28836
 40080f4:	40084300 	call	4008430 <printf>
 printf ("read:address0 = [0x%0x]\n", IORD_16DIRECT (MY_SDRAM_0_BASE, 0));
 40080f8:	8140002b 	ldhuio	r5,0(r16)
 40080fc:	01010074 	movhi	r4,1025
 4008100:	297fffcc 	andi	r5,r5,65535
 4008104:	2123f504 	addi	r4,r4,-28716
 4008108:	40084300 	call	4008430 <printf>
 printf ("read:address1 = [0x%0x]\n", IORD_16DIRECT (MY_SDRAM_0_BASE, 1));
 400810c:	8940002b 	ldhuio	r5,0(r17)
 4008110:	01010074 	movhi	r4,1025
 4008114:	297fffcc 	andi	r5,r5,65535
 4008118:	2123fc04 	addi	r4,r4,-28688
 400811c:	40084300 	call	4008430 <printf>


 //consecutive read and write operation

 IOWR_16DIRECT(MY_SDRAM_0_BASE, 20, data2);
 4008120:	85000504 	addi	r20,r16,20
 4008124:	00888884 	movi	r2,8738
 4008128:	a080002d 	sthio	r2,0(r20)
 printf("Writing [0x%x] to data2 register.\n", data2);
 400812c:	01010074 	movhi	r4,1025
 4008130:	01488884 	movi	r5,8738
 4008134:	21240304 	addi	r4,r4,-28660
 4008138:	40084300 	call	4008430 <printf>
  printf ("read:address20= [0x%0x]\n", IORD_16DIRECT (MY_SDRAM_0_BASE, 20));
 400813c:	a140002b 	ldhuio	r5,0(r20)
 4008140:	01010074 	movhi	r4,1025
 4008144:	297fffcc 	andi	r5,r5,65535
 4008148:	21240c04 	addi	r4,r4,-28624
 400814c:	40084300 	call	4008430 <printf>

 IOWR_16DIRECT(MY_SDRAM_0_BASE, 30, data3);
 4008150:	84c00784 	addi	r19,r16,30
 4008154:	008cccc4 	movi	r2,13107
 4008158:	9880002d 	sthio	r2,0(r19)
 printf("Writing [0x%x] to data3 register.\n", data3);
 400815c:	01010074 	movhi	r4,1025
 4008160:	014cccc4 	movi	r5,13107
 4008164:	21241304 	addi	r4,r4,-28596
 4008168:	40084300 	call	4008430 <printf>
 printf ("read:address30 = [0x%0x]\n", IORD_16DIRECT (MY_SDRAM_0_BASE, 30));
 400816c:	9940002b 	ldhuio	r5,0(r19)
 4008170:	01010074 	movhi	r4,1025
 4008174:	297fffcc 	andi	r5,r5,65535
 4008178:	21241c04 	addi	r4,r4,-28560
 400817c:	40084300 	call	4008430 <printf>

 IOWR_16DIRECT(MY_SDRAM_0_BASE, 28, data4);
 4008180:	85400704 	addi	r21,r16,28
 4008184:	00911104 	movi	r2,17476
 4008188:	a880002d 	sthio	r2,0(r21)
 printf("Writing [0x%x] to address21 register.\n", data4);
 400818c:	01010074 	movhi	r4,1025
 4008190:	01511104 	movi	r5,17476
 4008194:	21242304 	addi	r4,r4,-28532
 4008198:	40084300 	call	4008430 <printf>
 printf ("read:address21= [0x%0x]\n", IORD_16DIRECT (MY_SDRAM_0_BASE, 21));
 400819c:	80800544 	addi	r2,r16,21
 40081a0:	1140002b 	ldhuio	r5,0(r2)
 40081a4:	01010074 	movhi	r4,1025
 40081a8:	297fffcc 	andi	r5,r5,65535
 40081ac:	21242d04 	addi	r4,r4,-28492
 40081b0:	40084300 	call	4008430 <printf>

  IOWR_16DIRECT(MY_SDRAM_0_BASE, 22, data5);
 40081b4:	84800584 	addi	r18,r16,22
 40081b8:	00955544 	movi	r2,21845
 40081bc:	9080002d 	sthio	r2,0(r18)
  printf("Writing [0x%x] to data22 register.\n", data5);
 40081c0:	01010074 	movhi	r4,1025
 40081c4:	01555544 	movi	r5,21845
 40081c8:	21243404 	addi	r4,r4,-28464
 40081cc:	40084300 	call	4008430 <printf>
  printf ("read:address22 = [0x%0x]\n", IORD_16DIRECT (MY_SDRAM_0_BASE, 22));
 40081d0:	9140002b 	ldhuio	r5,0(r18)
 40081d4:	01010074 	movhi	r4,1025
 40081d8:	297fffcc 	andi	r5,r5,65535
 40081dc:	21243d04 	addi	r4,r4,-28428
 40081e0:	40084300 	call	4008430 <printf>

  IOWR_16DIRECT(MY_SDRAM_0_BASE, 2559, data6);
 40081e4:	8c427f84 	addi	r17,r17,2558
 40081e8:	00999984 	movi	r2,26214
 40081ec:	8880002d 	sthio	r2,0(r17)
   printf("Writing [0x%x] to address2559 register.\n", data6);
 40081f0:	01010074 	movhi	r4,1025
 40081f4:	01599984 	movi	r5,26214
 40081f8:	21244404 	addi	r4,r4,-28400
 40081fc:	40084300 	call	4008430 <printf>
    printf ("read:address2559= [0x%0x]\n", IORD_16DIRECT (MY_SDRAM_0_BASE, 2559));
 4008200:	8940002b 	ldhuio	r5,0(r17)
 4008204:	01010074 	movhi	r4,1025
 4008208:	297fffcc 	andi	r5,r5,65535
 400820c:	21244f04 	addi	r4,r4,-28356
 4008210:	40084300 	call	4008430 <printf>

   IOWR_16DIRECT(MY_SDRAM_0_BASE, 359875, data7);
 4008214:	04008174 	movhi	r16,517
 4008218:	841f70c4 	addi	r16,r16,32195
 400821c:	009dddc4 	movi	r2,30583
 4008220:	8080002d 	sthio	r2,0(r16)
   printf("Writing [0x%x] to address359875 register.\n", data7);
 4008224:	01010074 	movhi	r4,1025
 4008228:	015dddc4 	movi	r5,30583
 400822c:	21245604 	addi	r4,r4,-28328
 4008230:	40084300 	call	4008430 <printf>
   printf ("read:address359875 = [0x%0x]\n", IORD_16DIRECT (MY_SDRAM_0_BASE, 359875));
 4008234:	8140002b 	ldhuio	r5,0(r16)
 4008238:	01010074 	movhi	r4,1025
 400823c:	297fffcc 	andi	r5,r5,65535
 4008240:	21246104 	addi	r4,r4,-28284
 4008244:	40084300 	call	4008430 <printf>

   //reading all previous written data continuosly

   printf (" read:address20		= [0x%0x]\n", IORD_16DIRECT (MY_SDRAM_0_BASE, 20));
 4008248:	a140002b 	ldhuio	r5,0(r20)
 400824c:	01010074 	movhi	r4,1025
 4008250:	297fffcc 	andi	r5,r5,65535
 4008254:	21246904 	addi	r4,r4,-28252
 4008258:	40084300 	call	4008430 <printf>
   printf ("read:address30 		= [0x%0x]\n", IORD_16DIRECT (MY_SDRAM_0_BASE, 30));
 400825c:	9940002b 	ldhuio	r5,0(r19)
 4008260:	01010074 	movhi	r4,1025
 4008264:	297fffcc 	andi	r5,r5,65535
 4008268:	21247004 	addi	r4,r4,-28224
 400826c:	40084300 	call	4008430 <printf>
   printf ("read:address21		= [0x%0x]\n", IORD_16DIRECT (MY_SDRAM_0_BASE, 28));
 4008270:	a940002b 	ldhuio	r5,0(r21)
 4008274:	01010074 	movhi	r4,1025
 4008278:	297fffcc 	andi	r5,r5,65535
 400827c:	21247704 	addi	r4,r4,-28196
 4008280:	40084300 	call	4008430 <printf>
   printf ("read:address22 		= [0x%0x]\n", IORD_16DIRECT (MY_SDRAM_0_BASE, 22));
 4008284:	9140002b 	ldhuio	r5,0(r18)
 4008288:	01010074 	movhi	r4,1025
 400828c:	297fffcc 	andi	r5,r5,65535
 4008290:	21247e04 	addi	r4,r4,-28168
 4008294:	40084300 	call	4008430 <printf>
   printf ("read:address2559	= [0x%0x]\n", IORD_16DIRECT (MY_SDRAM_0_BASE, 2559));
 4008298:	8940002b 	ldhuio	r5,0(r17)
 400829c:	01010074 	movhi	r4,1025
 40082a0:	297fffcc 	andi	r5,r5,65535
 40082a4:	21248504 	addi	r4,r4,-28140
 40082a8:	40084300 	call	4008430 <printf>
   printf ("read:address359875 	= [0x%0x]\n", IORD_16DIRECT (MY_SDRAM_0_BASE, 359875));
 40082ac:	8140002b 	ldhuio	r5,0(r16)
 40082b0:	01010074 	movhi	r4,1025
 40082b4:	297fffcc 	andi	r5,r5,65535
 40082b8:	21248c04 	addi	r4,r4,-28112
 40082bc:	40084300 	call	4008430 <printf>

   // writing continuously and then reading continuously
   IOWR_16DIRECT(MY_SDRAM_0_BASE, 3875, data10);
 40082c0:	05408034 	movhi	r21,512
 40082c4:	ad43c8c4 	addi	r21,r21,3875
 40082c8:	00aaaa84 	movi	r2,-21846
 40082cc:	a880002d 	sthio	r2,0(r21)
   printf("Writing [0x%x] to address3875 register.\n", data11);
 40082d0:	01010074 	movhi	r4,1025
 40082d4:	016eeec4 	movi	r5,-17477
 40082d8:	21249404 	addi	r4,r4,-28080
 40082dc:	40084300 	call	4008430 <printf>
   IOWR_16DIRECT(MY_SDRAM_0_BASE, 59875, data11);
 40082e0:	05008074 	movhi	r20,513
 40082e4:	a53a78c4 	addi	r20,r20,-5661
 40082e8:	00aeeec4 	movi	r2,-17477
 40082ec:	a080002d 	sthio	r2,0(r20)
   printf("Writing [0x%x] to address59875 register.\n", data12);
 40082f0:	01010074 	movhi	r4,1025
 40082f4:	01733304 	movi	r5,-13108
 40082f8:	21249f04 	addi	r4,r4,-28036
 40082fc:	40084300 	call	4008430 <printf>
   IOWR_16DIRECT(MY_SDRAM_0_BASE, 34, data12);
 4008300:	04c08034 	movhi	r19,512
 4008304:	9cc00884 	addi	r19,r19,34
 4008308:	00b33304 	movi	r2,-13108
 400830c:	9880002d 	sthio	r2,0(r19)
   printf("Writing [0x%x] to address34 register.\n", data13);
 4008310:	01010074 	movhi	r4,1025
 4008314:	01777744 	movi	r5,-8739
 4008318:	2124aa04 	addi	r4,r4,-27992
 400831c:	40084300 	call	4008430 <printf>
   IOWR_16DIRECT(MY_SDRAM_0_BASE, 95, data13);
 4008320:	04808034 	movhi	r18,512
 4008324:	948017c4 	addi	r18,r18,95
 4008328:	00b77744 	movi	r2,-8739
 400832c:	9080002d 	sthio	r2,0(r18)
   printf("Writing [0x%x] to address95 register.\n", data14);
 4008330:	01010074 	movhi	r4,1025
 4008334:	017bbb84 	movi	r5,-4370
 4008338:	2124b404 	addi	r4,r4,-27952
 400833c:	40084300 	call	4008430 <printf>
   IOWR_16DIRECT(MY_SDRAM_0_BASE, 359875, data14);
 4008340:	00bbbb84 	movi	r2,-4370
 4008344:	8080002d 	sthio	r2,0(r16)
   printf("Writing [0x%x] to address359875 register.\n", data15);
 4008348:	01010074 	movhi	r4,1025
 400834c:	017fffc4 	movi	r5,-1
 4008350:	21245604 	addi	r4,r4,-28328
 4008354:	40084300 	call	4008430 <printf>
   IOWR_16DIRECT(MY_SDRAM_0_BASE, 1234, data15);
 4008358:	04408034 	movhi	r17,512
 400835c:	8c413484 	addi	r17,r17,1234
 4008360:	00bfffc4 	movi	r2,-1
 4008364:	8880002d 	sthio	r2,0(r17)
   printf("Writing [0x%x] to address1234 register.\n", data7);
 4008368:	01010074 	movhi	r4,1025
 400836c:	015dddc4 	movi	r5,30583
 4008370:	2124be04 	addi	r4,r4,-27912
 4008374:	40084300 	call	4008430 <printf>

   printf ("read:address3875	= [0x%0x]\n", IORD_16DIRECT (MY_SDRAM_0_BASE, 3875));
 4008378:	a940002b 	ldhuio	r5,0(r21)
 400837c:	01010074 	movhi	r4,1025
 4008380:	297fffcc 	andi	r5,r5,65535
 4008384:	2124c904 	addi	r4,r4,-27868
 4008388:	40084300 	call	4008430 <printf>
   printf ("read:address59875 	= [0x%0x]\n", IORD_16DIRECT (MY_SDRAM_0_BASE, 59875));
 400838c:	a140002b 	ldhuio	r5,0(r20)
 4008390:	01010074 	movhi	r4,1025
 4008394:	297fffcc 	andi	r5,r5,65535
 4008398:	2124d004 	addi	r4,r4,-27840
 400839c:	40084300 	call	4008430 <printf>
   printf ("read:address34		= [0x%0x]\n", IORD_16DIRECT (MY_SDRAM_0_BASE, 34));
 40083a0:	9940002b 	ldhuio	r5,0(r19)
 40083a4:	01010074 	movhi	r4,1025
 40083a8:	297fffcc 	andi	r5,r5,65535
 40083ac:	2124d804 	addi	r4,r4,-27808
 40083b0:	40084300 	call	4008430 <printf>
   printf ("read:address95		= [0x%0x]\n", IORD_16DIRECT (MY_SDRAM_0_BASE, 95));
 40083b4:	9140002b 	ldhuio	r5,0(r18)
 40083b8:	01010074 	movhi	r4,1025
 40083bc:	297fffcc 	andi	r5,r5,65535
 40083c0:	2124df04 	addi	r4,r4,-27780
 40083c4:	40084300 	call	4008430 <printf>
   printf ("read:address359875	= [0x%0x]\n", IORD_16DIRECT (MY_SDRAM_0_BASE, 359875));
 40083c8:	8140002b 	ldhuio	r5,0(r16)
 40083cc:	01010074 	movhi	r4,1025
 40083d0:	297fffcc 	andi	r5,r5,65535
 40083d4:	2124e604 	addi	r4,r4,-27752
 40083d8:	40084300 	call	4008430 <printf>
   printf ("read:address1234 	= [0x%0x]\n", IORD_16DIRECT (MY_SDRAM_0_BASE, 1234));
 40083dc:	8940002b 	ldhuio	r5,0(r17)
 40083e0:	01010074 	movhi	r4,1025
 40083e4:	297fffcc 	andi	r5,r5,65535
 40083e8:	2124ee04 	addi	r4,r4,-27720
 40083ec:	40084300 	call	4008430 <printf>
 40083f0:	003fff06 	br	40083f0 <_gp+0xffff6f38>

040083f4 <_printf_r>:
 40083f4:	defffd04 	addi	sp,sp,-12
 40083f8:	dfc00015 	stw	ra,0(sp)
 40083fc:	d9800115 	stw	r6,4(sp)
 4008400:	d9c00215 	stw	r7,8(sp)
 4008404:	20c00217 	ldw	r3,8(r4)
 4008408:	01810074 	movhi	r6,1025
 400840c:	31a28c04 	addi	r6,r6,-30160
 4008410:	19800115 	stw	r6,4(r3)
 4008414:	280d883a 	mov	r6,r5
 4008418:	21400217 	ldw	r5,8(r4)
 400841c:	d9c00104 	addi	r7,sp,4
 4008420:	40084e80 	call	40084e8 <___vfprintf_internal_r>
 4008424:	dfc00017 	ldw	ra,0(sp)
 4008428:	dec00304 	addi	sp,sp,12
 400842c:	f800283a 	ret

04008430 <printf>:
 4008430:	defffc04 	addi	sp,sp,-16
 4008434:	dfc00015 	stw	ra,0(sp)
 4008438:	d9400115 	stw	r5,4(sp)
 400843c:	d9800215 	stw	r6,8(sp)
 4008440:	d9c00315 	stw	r7,12(sp)
 4008444:	00810074 	movhi	r2,1025
 4008448:	10a52f04 	addi	r2,r2,-27460
 400844c:	10800017 	ldw	r2,0(r2)
 4008450:	01410074 	movhi	r5,1025
 4008454:	29628c04 	addi	r5,r5,-30160
 4008458:	10c00217 	ldw	r3,8(r2)
 400845c:	d9800104 	addi	r6,sp,4
 4008460:	19400115 	stw	r5,4(r3)
 4008464:	200b883a 	mov	r5,r4
 4008468:	11000217 	ldw	r4,8(r2)
 400846c:	4008a140 	call	4008a14 <__vfprintf_internal>
 4008470:	dfc00017 	ldw	ra,0(sp)
 4008474:	dec00404 	addi	sp,sp,16
 4008478:	f800283a 	ret

0400847c <print_repeat>:
 400847c:	defffb04 	addi	sp,sp,-20
 4008480:	dc800315 	stw	r18,12(sp)
 4008484:	dc400215 	stw	r17,8(sp)
 4008488:	dc000115 	stw	r16,4(sp)
 400848c:	dfc00415 	stw	ra,16(sp)
 4008490:	2025883a 	mov	r18,r4
 4008494:	2823883a 	mov	r17,r5
 4008498:	d9800005 	stb	r6,0(sp)
 400849c:	3821883a 	mov	r16,r7
 40084a0:	04000a0e 	bge	zero,r16,40084cc <print_repeat+0x50>
 40084a4:	88800117 	ldw	r2,4(r17)
 40084a8:	01c00044 	movi	r7,1
 40084ac:	d80d883a 	mov	r6,sp
 40084b0:	880b883a 	mov	r5,r17
 40084b4:	9009883a 	mov	r4,r18
 40084b8:	103ee83a 	callr	r2
 40084bc:	843fffc4 	addi	r16,r16,-1
 40084c0:	103ff726 	beq	r2,zero,40084a0 <_gp+0xffff6fe8>
 40084c4:	00bfffc4 	movi	r2,-1
 40084c8:	00000106 	br	40084d0 <print_repeat+0x54>
 40084cc:	0005883a 	mov	r2,zero
 40084d0:	dfc00417 	ldw	ra,16(sp)
 40084d4:	dc800317 	ldw	r18,12(sp)
 40084d8:	dc400217 	ldw	r17,8(sp)
 40084dc:	dc000117 	ldw	r16,4(sp)
 40084e0:	dec00504 	addi	sp,sp,20
 40084e4:	f800283a 	ret

040084e8 <___vfprintf_internal_r>:
 40084e8:	deffe504 	addi	sp,sp,-108
 40084ec:	d8c00804 	addi	r3,sp,32
 40084f0:	ddc01815 	stw	r23,96(sp)
 40084f4:	dd801715 	stw	r22,92(sp)
 40084f8:	dd401615 	stw	r21,88(sp)
 40084fc:	dd001515 	stw	r20,84(sp)
 4008500:	dcc01415 	stw	r19,80(sp)
 4008504:	dc801315 	stw	r18,76(sp)
 4008508:	dc401215 	stw	r17,72(sp)
 400850c:	dc001115 	stw	r16,68(sp)
 4008510:	dfc01a15 	stw	ra,104(sp)
 4008514:	df001915 	stw	fp,100(sp)
 4008518:	2029883a 	mov	r20,r4
 400851c:	2823883a 	mov	r17,r5
 4008520:	382d883a 	mov	r22,r7
 4008524:	d9800f15 	stw	r6,60(sp)
 4008528:	0021883a 	mov	r16,zero
 400852c:	d8000e15 	stw	zero,56(sp)
 4008530:	d8000a15 	stw	zero,40(sp)
 4008534:	002b883a 	mov	r21,zero
 4008538:	0027883a 	mov	r19,zero
 400853c:	0025883a 	mov	r18,zero
 4008540:	d8000c15 	stw	zero,48(sp)
 4008544:	d8000b15 	stw	zero,44(sp)
 4008548:	002f883a 	mov	r23,zero
 400854c:	d8c00915 	stw	r3,36(sp)
 4008550:	d8c00f17 	ldw	r3,60(sp)
 4008554:	19000003 	ldbu	r4,0(r3)
 4008558:	20803fcc 	andi	r2,r4,255
 400855c:	1080201c 	xori	r2,r2,128
 4008560:	10bfe004 	addi	r2,r2,-128
 4008564:	10011e26 	beq	r2,zero,40089e0 <___vfprintf_internal_r+0x4f8>
 4008568:	00c00044 	movi	r3,1
 400856c:	b8c01426 	beq	r23,r3,40085c0 <___vfprintf_internal_r+0xd8>
 4008570:	1dc00216 	blt	r3,r23,400857c <___vfprintf_internal_r+0x94>
 4008574:	b8000626 	beq	r23,zero,4008590 <___vfprintf_internal_r+0xa8>
 4008578:	00011506 	br	40089d0 <___vfprintf_internal_r+0x4e8>
 400857c:	01400084 	movi	r5,2
 4008580:	b9401d26 	beq	r23,r5,40085f8 <___vfprintf_internal_r+0x110>
 4008584:	014000c4 	movi	r5,3
 4008588:	b9402b26 	beq	r23,r5,4008638 <___vfprintf_internal_r+0x150>
 400858c:	00011006 	br	40089d0 <___vfprintf_internal_r+0x4e8>
 4008590:	01400944 	movi	r5,37
 4008594:	1140fc26 	beq	r2,r5,4008988 <___vfprintf_internal_r+0x4a0>
 4008598:	88800117 	ldw	r2,4(r17)
 400859c:	d9000005 	stb	r4,0(sp)
 40085a0:	01c00044 	movi	r7,1
 40085a4:	d80d883a 	mov	r6,sp
 40085a8:	880b883a 	mov	r5,r17
 40085ac:	a009883a 	mov	r4,r20
 40085b0:	103ee83a 	callr	r2
 40085b4:	1000d81e 	bne	r2,zero,4008918 <___vfprintf_internal_r+0x430>
 40085b8:	84000044 	addi	r16,r16,1
 40085bc:	00010406 	br	40089d0 <___vfprintf_internal_r+0x4e8>
 40085c0:	01400c04 	movi	r5,48
 40085c4:	1140fa26 	beq	r2,r5,40089b0 <___vfprintf_internal_r+0x4c8>
 40085c8:	01400944 	movi	r5,37
 40085cc:	11400a1e 	bne	r2,r5,40085f8 <___vfprintf_internal_r+0x110>
 40085d0:	d8800005 	stb	r2,0(sp)
 40085d4:	88800117 	ldw	r2,4(r17)
 40085d8:	b80f883a 	mov	r7,r23
 40085dc:	d80d883a 	mov	r6,sp
 40085e0:	880b883a 	mov	r5,r17
 40085e4:	a009883a 	mov	r4,r20
 40085e8:	103ee83a 	callr	r2
 40085ec:	1000ca1e 	bne	r2,zero,4008918 <___vfprintf_internal_r+0x430>
 40085f0:	84000044 	addi	r16,r16,1
 40085f4:	0000f506 	br	40089cc <___vfprintf_internal_r+0x4e4>
 40085f8:	25fff404 	addi	r23,r4,-48
 40085fc:	bdc03fcc 	andi	r23,r23,255
 4008600:	00c00244 	movi	r3,9
 4008604:	1dc00936 	bltu	r3,r23,400862c <___vfprintf_internal_r+0x144>
 4008608:	00bfffc4 	movi	r2,-1
 400860c:	90800426 	beq	r18,r2,4008620 <___vfprintf_internal_r+0x138>
 4008610:	01400284 	movi	r5,10
 4008614:	9009883a 	mov	r4,r18
 4008618:	4008d100 	call	4008d10 <__mulsi3>
 400861c:	00000106 	br	4008624 <___vfprintf_internal_r+0x13c>
 4008620:	0005883a 	mov	r2,zero
 4008624:	b8a5883a 	add	r18,r23,r2
 4008628:	0000e206 	br	40089b4 <___vfprintf_internal_r+0x4cc>
 400862c:	01400b84 	movi	r5,46
 4008630:	1140e426 	beq	r2,r5,40089c4 <___vfprintf_internal_r+0x4dc>
 4008634:	05c00084 	movi	r23,2
 4008638:	213ff404 	addi	r4,r4,-48
 400863c:	27003fcc 	andi	fp,r4,255
 4008640:	00c00244 	movi	r3,9
 4008644:	1f000936 	bltu	r3,fp,400866c <___vfprintf_internal_r+0x184>
 4008648:	00bfffc4 	movi	r2,-1
 400864c:	98800426 	beq	r19,r2,4008660 <___vfprintf_internal_r+0x178>
 4008650:	01400284 	movi	r5,10
 4008654:	9809883a 	mov	r4,r19
 4008658:	4008d100 	call	4008d10 <__mulsi3>
 400865c:	00000106 	br	4008664 <___vfprintf_internal_r+0x17c>
 4008660:	0005883a 	mov	r2,zero
 4008664:	e0a7883a 	add	r19,fp,r2
 4008668:	0000d906 	br	40089d0 <___vfprintf_internal_r+0x4e8>
 400866c:	00c01b04 	movi	r3,108
 4008670:	10c0d226 	beq	r2,r3,40089bc <___vfprintf_internal_r+0x4d4>
 4008674:	013fffc4 	movi	r4,-1
 4008678:	99000226 	beq	r19,r4,4008684 <___vfprintf_internal_r+0x19c>
 400867c:	d8000b15 	stw	zero,44(sp)
 4008680:	00000106 	br	4008688 <___vfprintf_internal_r+0x1a0>
 4008684:	04c00044 	movi	r19,1
 4008688:	01001a44 	movi	r4,105
 400868c:	11001626 	beq	r2,r4,40086e8 <___vfprintf_internal_r+0x200>
 4008690:	20800916 	blt	r4,r2,40086b8 <___vfprintf_internal_r+0x1d0>
 4008694:	010018c4 	movi	r4,99
 4008698:	11008826 	beq	r2,r4,40088bc <___vfprintf_internal_r+0x3d4>
 400869c:	01001904 	movi	r4,100
 40086a0:	11001126 	beq	r2,r4,40086e8 <___vfprintf_internal_r+0x200>
 40086a4:	01001604 	movi	r4,88
 40086a8:	1100c81e 	bne	r2,r4,40089cc <___vfprintf_internal_r+0x4e4>
 40086ac:	00c00044 	movi	r3,1
 40086b0:	d8c00e15 	stw	r3,56(sp)
 40086b4:	00001506 	br	400870c <___vfprintf_internal_r+0x224>
 40086b8:	01001cc4 	movi	r4,115
 40086bc:	11009826 	beq	r2,r4,4008920 <___vfprintf_internal_r+0x438>
 40086c0:	20800416 	blt	r4,r2,40086d4 <___vfprintf_internal_r+0x1ec>
 40086c4:	01001bc4 	movi	r4,111
 40086c8:	1100c01e 	bne	r2,r4,40089cc <___vfprintf_internal_r+0x4e4>
 40086cc:	05400204 	movi	r21,8
 40086d0:	00000f06 	br	4008710 <___vfprintf_internal_r+0x228>
 40086d4:	01001d44 	movi	r4,117
 40086d8:	11000d26 	beq	r2,r4,4008710 <___vfprintf_internal_r+0x228>
 40086dc:	01001e04 	movi	r4,120
 40086e0:	11000a26 	beq	r2,r4,400870c <___vfprintf_internal_r+0x224>
 40086e4:	0000b906 	br	40089cc <___vfprintf_internal_r+0x4e4>
 40086e8:	d8c00a17 	ldw	r3,40(sp)
 40086ec:	b7000104 	addi	fp,r22,4
 40086f0:	18000726 	beq	r3,zero,4008710 <___vfprintf_internal_r+0x228>
 40086f4:	df000d15 	stw	fp,52(sp)
 40086f8:	b5c00017 	ldw	r23,0(r22)
 40086fc:	b800080e 	bge	r23,zero,4008720 <___vfprintf_internal_r+0x238>
 4008700:	05efc83a 	sub	r23,zero,r23
 4008704:	02400044 	movi	r9,1
 4008708:	00000606 	br	4008724 <___vfprintf_internal_r+0x23c>
 400870c:	05400404 	movi	r21,16
 4008710:	b0c00104 	addi	r3,r22,4
 4008714:	d8c00d15 	stw	r3,52(sp)
 4008718:	b5c00017 	ldw	r23,0(r22)
 400871c:	d8000a15 	stw	zero,40(sp)
 4008720:	0013883a 	mov	r9,zero
 4008724:	d839883a 	mov	fp,sp
 4008728:	b8001726 	beq	r23,zero,4008788 <___vfprintf_internal_r+0x2a0>
 400872c:	a80b883a 	mov	r5,r21
 4008730:	b809883a 	mov	r4,r23
 4008734:	da401015 	stw	r9,64(sp)
 4008738:	4008c540 	call	4008c54 <__udivsi3>
 400873c:	a80b883a 	mov	r5,r21
 4008740:	1009883a 	mov	r4,r2
 4008744:	102d883a 	mov	r22,r2
 4008748:	4008d100 	call	4008d10 <__mulsi3>
 400874c:	b885c83a 	sub	r2,r23,r2
 4008750:	00c00244 	movi	r3,9
 4008754:	da401017 	ldw	r9,64(sp)
 4008758:	18800216 	blt	r3,r2,4008764 <___vfprintf_internal_r+0x27c>
 400875c:	10800c04 	addi	r2,r2,48
 4008760:	00000506 	br	4008778 <___vfprintf_internal_r+0x290>
 4008764:	d8c00e17 	ldw	r3,56(sp)
 4008768:	18000226 	beq	r3,zero,4008774 <___vfprintf_internal_r+0x28c>
 400876c:	10800dc4 	addi	r2,r2,55
 4008770:	00000106 	br	4008778 <___vfprintf_internal_r+0x290>
 4008774:	108015c4 	addi	r2,r2,87
 4008778:	e0800005 	stb	r2,0(fp)
 400877c:	b02f883a 	mov	r23,r22
 4008780:	e7000044 	addi	fp,fp,1
 4008784:	003fe806 	br	4008728 <_gp+0xffff7270>
 4008788:	e6efc83a 	sub	r23,fp,sp
 400878c:	9dc5c83a 	sub	r2,r19,r23
 4008790:	0080090e 	bge	zero,r2,40087b8 <___vfprintf_internal_r+0x2d0>
 4008794:	e085883a 	add	r2,fp,r2
 4008798:	01400c04 	movi	r5,48
 400879c:	d8c00917 	ldw	r3,36(sp)
 40087a0:	e009883a 	mov	r4,fp
 40087a4:	e0c0032e 	bgeu	fp,r3,40087b4 <___vfprintf_internal_r+0x2cc>
 40087a8:	e7000044 	addi	fp,fp,1
 40087ac:	21400005 	stb	r5,0(r4)
 40087b0:	e0bffa1e 	bne	fp,r2,400879c <_gp+0xffff72e4>
 40087b4:	e6efc83a 	sub	r23,fp,sp
 40087b8:	d8c00b17 	ldw	r3,44(sp)
 40087bc:	4dd1883a 	add	r8,r9,r23
 40087c0:	922dc83a 	sub	r22,r18,r8
 40087c4:	18001626 	beq	r3,zero,4008820 <___vfprintf_internal_r+0x338>
 40087c8:	48000a26 	beq	r9,zero,40087f4 <___vfprintf_internal_r+0x30c>
 40087cc:	00800b44 	movi	r2,45
 40087d0:	d8800805 	stb	r2,32(sp)
 40087d4:	88800117 	ldw	r2,4(r17)
 40087d8:	01c00044 	movi	r7,1
 40087dc:	d9800804 	addi	r6,sp,32
 40087e0:	880b883a 	mov	r5,r17
 40087e4:	a009883a 	mov	r4,r20
 40087e8:	103ee83a 	callr	r2
 40087ec:	10004a1e 	bne	r2,zero,4008918 <___vfprintf_internal_r+0x430>
 40087f0:	84000044 	addi	r16,r16,1
 40087f4:	0580070e 	bge	zero,r22,4008814 <___vfprintf_internal_r+0x32c>
 40087f8:	b00f883a 	mov	r7,r22
 40087fc:	01800c04 	movi	r6,48
 4008800:	880b883a 	mov	r5,r17
 4008804:	a009883a 	mov	r4,r20
 4008808:	400847c0 	call	400847c <print_repeat>
 400880c:	1000421e 	bne	r2,zero,4008918 <___vfprintf_internal_r+0x430>
 4008810:	85a1883a 	add	r16,r16,r22
 4008814:	e02d883a 	mov	r22,fp
 4008818:	bf2fc83a 	sub	r23,r23,fp
 400881c:	00002006 	br	40088a0 <___vfprintf_internal_r+0x3b8>
 4008820:	0580090e 	bge	zero,r22,4008848 <___vfprintf_internal_r+0x360>
 4008824:	b00f883a 	mov	r7,r22
 4008828:	01800804 	movi	r6,32
 400882c:	880b883a 	mov	r5,r17
 4008830:	a009883a 	mov	r4,r20
 4008834:	da401015 	stw	r9,64(sp)
 4008838:	400847c0 	call	400847c <print_repeat>
 400883c:	da401017 	ldw	r9,64(sp)
 4008840:	1000351e 	bne	r2,zero,4008918 <___vfprintf_internal_r+0x430>
 4008844:	85a1883a 	add	r16,r16,r22
 4008848:	483ff226 	beq	r9,zero,4008814 <_gp+0xffff735c>
 400884c:	00800b44 	movi	r2,45
 4008850:	d8800805 	stb	r2,32(sp)
 4008854:	88800117 	ldw	r2,4(r17)
 4008858:	01c00044 	movi	r7,1
 400885c:	d9800804 	addi	r6,sp,32
 4008860:	880b883a 	mov	r5,r17
 4008864:	a009883a 	mov	r4,r20
 4008868:	103ee83a 	callr	r2
 400886c:	10002a1e 	bne	r2,zero,4008918 <___vfprintf_internal_r+0x430>
 4008870:	84000044 	addi	r16,r16,1
 4008874:	003fe706 	br	4008814 <_gp+0xffff735c>
 4008878:	b5bfffc4 	addi	r22,r22,-1
 400887c:	b0800003 	ldbu	r2,0(r22)
 4008880:	01c00044 	movi	r7,1
 4008884:	d9800804 	addi	r6,sp,32
 4008888:	d8800805 	stb	r2,32(sp)
 400888c:	88800117 	ldw	r2,4(r17)
 4008890:	880b883a 	mov	r5,r17
 4008894:	a009883a 	mov	r4,r20
 4008898:	103ee83a 	callr	r2
 400889c:	10001e1e 	bne	r2,zero,4008918 <___vfprintf_internal_r+0x430>
 40088a0:	8585c83a 	sub	r2,r16,r22
 40088a4:	b5c9883a 	add	r4,r22,r23
 40088a8:	e085883a 	add	r2,fp,r2
 40088ac:	013ff216 	blt	zero,r4,4008878 <_gp+0xffff73c0>
 40088b0:	1021883a 	mov	r16,r2
 40088b4:	dd800d17 	ldw	r22,52(sp)
 40088b8:	00004406 	br	40089cc <___vfprintf_internal_r+0x4e4>
 40088bc:	00800044 	movi	r2,1
 40088c0:	1480080e 	bge	r2,r18,40088e4 <___vfprintf_internal_r+0x3fc>
 40088c4:	95ffffc4 	addi	r23,r18,-1
 40088c8:	b80f883a 	mov	r7,r23
 40088cc:	01800804 	movi	r6,32
 40088d0:	880b883a 	mov	r5,r17
 40088d4:	a009883a 	mov	r4,r20
 40088d8:	400847c0 	call	400847c <print_repeat>
 40088dc:	10000e1e 	bne	r2,zero,4008918 <___vfprintf_internal_r+0x430>
 40088e0:	85e1883a 	add	r16,r16,r23
 40088e4:	b0800017 	ldw	r2,0(r22)
 40088e8:	01c00044 	movi	r7,1
 40088ec:	d80d883a 	mov	r6,sp
 40088f0:	d8800005 	stb	r2,0(sp)
 40088f4:	88800117 	ldw	r2,4(r17)
 40088f8:	880b883a 	mov	r5,r17
 40088fc:	a009883a 	mov	r4,r20
 4008900:	b5c00104 	addi	r23,r22,4
 4008904:	103ee83a 	callr	r2
 4008908:	1000031e 	bne	r2,zero,4008918 <___vfprintf_internal_r+0x430>
 400890c:	84000044 	addi	r16,r16,1
 4008910:	b82d883a 	mov	r22,r23
 4008914:	00002d06 	br	40089cc <___vfprintf_internal_r+0x4e4>
 4008918:	00bfffc4 	movi	r2,-1
 400891c:	00003106 	br	40089e4 <___vfprintf_internal_r+0x4fc>
 4008920:	b5c00017 	ldw	r23,0(r22)
 4008924:	b7000104 	addi	fp,r22,4
 4008928:	b809883a 	mov	r4,r23
 400892c:	4008ae80 	call	4008ae8 <strlen>
 4008930:	9091c83a 	sub	r8,r18,r2
 4008934:	102d883a 	mov	r22,r2
 4008938:	0200090e 	bge	zero,r8,4008960 <___vfprintf_internal_r+0x478>
 400893c:	400f883a 	mov	r7,r8
 4008940:	01800804 	movi	r6,32
 4008944:	880b883a 	mov	r5,r17
 4008948:	a009883a 	mov	r4,r20
 400894c:	da001015 	stw	r8,64(sp)
 4008950:	400847c0 	call	400847c <print_repeat>
 4008954:	da001017 	ldw	r8,64(sp)
 4008958:	103fef1e 	bne	r2,zero,4008918 <_gp+0xffff7460>
 400895c:	8221883a 	add	r16,r16,r8
 4008960:	88800117 	ldw	r2,4(r17)
 4008964:	b00f883a 	mov	r7,r22
 4008968:	b80d883a 	mov	r6,r23
 400896c:	880b883a 	mov	r5,r17
 4008970:	a009883a 	mov	r4,r20
 4008974:	103ee83a 	callr	r2
 4008978:	103fe71e 	bne	r2,zero,4008918 <_gp+0xffff7460>
 400897c:	85a1883a 	add	r16,r16,r22
 4008980:	e02d883a 	mov	r22,fp
 4008984:	00001106 	br	40089cc <___vfprintf_internal_r+0x4e4>
 4008988:	00c00044 	movi	r3,1
 400898c:	04ffffc4 	movi	r19,-1
 4008990:	d8000e15 	stw	zero,56(sp)
 4008994:	d8c00a15 	stw	r3,40(sp)
 4008998:	05400284 	movi	r21,10
 400899c:	9825883a 	mov	r18,r19
 40089a0:	d8000c15 	stw	zero,48(sp)
 40089a4:	d8000b15 	stw	zero,44(sp)
 40089a8:	182f883a 	mov	r23,r3
 40089ac:	00000806 	br	40089d0 <___vfprintf_internal_r+0x4e8>
 40089b0:	ddc00b15 	stw	r23,44(sp)
 40089b4:	05c00084 	movi	r23,2
 40089b8:	00000506 	br	40089d0 <___vfprintf_internal_r+0x4e8>
 40089bc:	00c00044 	movi	r3,1
 40089c0:	d8c00c15 	stw	r3,48(sp)
 40089c4:	05c000c4 	movi	r23,3
 40089c8:	00000106 	br	40089d0 <___vfprintf_internal_r+0x4e8>
 40089cc:	002f883a 	mov	r23,zero
 40089d0:	d8c00f17 	ldw	r3,60(sp)
 40089d4:	18c00044 	addi	r3,r3,1
 40089d8:	d8c00f15 	stw	r3,60(sp)
 40089dc:	003edc06 	br	4008550 <_gp+0xffff7098>
 40089e0:	8005883a 	mov	r2,r16
 40089e4:	dfc01a17 	ldw	ra,104(sp)
 40089e8:	df001917 	ldw	fp,100(sp)
 40089ec:	ddc01817 	ldw	r23,96(sp)
 40089f0:	dd801717 	ldw	r22,92(sp)
 40089f4:	dd401617 	ldw	r21,88(sp)
 40089f8:	dd001517 	ldw	r20,84(sp)
 40089fc:	dcc01417 	ldw	r19,80(sp)
 4008a00:	dc801317 	ldw	r18,76(sp)
 4008a04:	dc401217 	ldw	r17,72(sp)
 4008a08:	dc001117 	ldw	r16,68(sp)
 4008a0c:	dec01b04 	addi	sp,sp,108
 4008a10:	f800283a 	ret

04008a14 <__vfprintf_internal>:
 4008a14:	00810074 	movhi	r2,1025
 4008a18:	10a52f04 	addi	r2,r2,-27460
 4008a1c:	300f883a 	mov	r7,r6
 4008a20:	280d883a 	mov	r6,r5
 4008a24:	200b883a 	mov	r5,r4
 4008a28:	11000017 	ldw	r4,0(r2)
 4008a2c:	40084e81 	jmpi	40084e8 <___vfprintf_internal_r>

04008a30 <__sfvwrite_small_dev>:
 4008a30:	2880000b 	ldhu	r2,0(r5)
 4008a34:	1080020c 	andi	r2,r2,8
 4008a38:	10002126 	beq	r2,zero,4008ac0 <__sfvwrite_small_dev+0x90>
 4008a3c:	2880008f 	ldh	r2,2(r5)
 4008a40:	defffa04 	addi	sp,sp,-24
 4008a44:	dc000015 	stw	r16,0(sp)
 4008a48:	dfc00515 	stw	ra,20(sp)
 4008a4c:	dd000415 	stw	r20,16(sp)
 4008a50:	dcc00315 	stw	r19,12(sp)
 4008a54:	dc800215 	stw	r18,8(sp)
 4008a58:	dc400115 	stw	r17,4(sp)
 4008a5c:	2821883a 	mov	r16,r5
 4008a60:	10001216 	blt	r2,zero,4008aac <__sfvwrite_small_dev+0x7c>
 4008a64:	2027883a 	mov	r19,r4
 4008a68:	3025883a 	mov	r18,r6
 4008a6c:	3823883a 	mov	r17,r7
 4008a70:	05010004 	movi	r20,1024
 4008a74:	04400b0e 	bge	zero,r17,4008aa4 <__sfvwrite_small_dev+0x74>
 4008a78:	880f883a 	mov	r7,r17
 4008a7c:	a440010e 	bge	r20,r17,4008a84 <__sfvwrite_small_dev+0x54>
 4008a80:	01c10004 	movi	r7,1024
 4008a84:	8140008f 	ldh	r5,2(r16)
 4008a88:	900d883a 	mov	r6,r18
 4008a8c:	9809883a 	mov	r4,r19
 4008a90:	4008b040 	call	4008b04 <_write_r>
 4008a94:	0080050e 	bge	zero,r2,4008aac <__sfvwrite_small_dev+0x7c>
 4008a98:	88a3c83a 	sub	r17,r17,r2
 4008a9c:	90a5883a 	add	r18,r18,r2
 4008aa0:	003ff406 	br	4008a74 <_gp+0xffff75bc>
 4008aa4:	0005883a 	mov	r2,zero
 4008aa8:	00000706 	br	4008ac8 <__sfvwrite_small_dev+0x98>
 4008aac:	8080000b 	ldhu	r2,0(r16)
 4008ab0:	10801014 	ori	r2,r2,64
 4008ab4:	8080000d 	sth	r2,0(r16)
 4008ab8:	00bfffc4 	movi	r2,-1
 4008abc:	00000206 	br	4008ac8 <__sfvwrite_small_dev+0x98>
 4008ac0:	00bfffc4 	movi	r2,-1
 4008ac4:	f800283a 	ret
 4008ac8:	dfc00517 	ldw	ra,20(sp)
 4008acc:	dd000417 	ldw	r20,16(sp)
 4008ad0:	dcc00317 	ldw	r19,12(sp)
 4008ad4:	dc800217 	ldw	r18,8(sp)
 4008ad8:	dc400117 	ldw	r17,4(sp)
 4008adc:	dc000017 	ldw	r16,0(sp)
 4008ae0:	dec00604 	addi	sp,sp,24
 4008ae4:	f800283a 	ret

04008ae8 <strlen>:
 4008ae8:	2005883a 	mov	r2,r4
 4008aec:	10c00007 	ldb	r3,0(r2)
 4008af0:	18000226 	beq	r3,zero,4008afc <strlen+0x14>
 4008af4:	10800044 	addi	r2,r2,1
 4008af8:	003ffc06 	br	4008aec <_gp+0xffff7634>
 4008afc:	1105c83a 	sub	r2,r2,r4
 4008b00:	f800283a 	ret

04008b04 <_write_r>:
 4008b04:	defffd04 	addi	sp,sp,-12
 4008b08:	dc000015 	stw	r16,0(sp)
 4008b0c:	04010074 	movhi	r16,1025
 4008b10:	dc400115 	stw	r17,4(sp)
 4008b14:	84256e04 	addi	r16,r16,-27208
 4008b18:	2023883a 	mov	r17,r4
 4008b1c:	2809883a 	mov	r4,r5
 4008b20:	300b883a 	mov	r5,r6
 4008b24:	380d883a 	mov	r6,r7
 4008b28:	dfc00215 	stw	ra,8(sp)
 4008b2c:	80000015 	stw	zero,0(r16)
 4008b30:	4008e7c0 	call	4008e7c <write>
 4008b34:	00ffffc4 	movi	r3,-1
 4008b38:	10c0031e 	bne	r2,r3,4008b48 <_write_r+0x44>
 4008b3c:	80c00017 	ldw	r3,0(r16)
 4008b40:	18000126 	beq	r3,zero,4008b48 <_write_r+0x44>
 4008b44:	88c00015 	stw	r3,0(r17)
 4008b48:	dfc00217 	ldw	ra,8(sp)
 4008b4c:	dc400117 	ldw	r17,4(sp)
 4008b50:	dc000017 	ldw	r16,0(sp)
 4008b54:	dec00304 	addi	sp,sp,12
 4008b58:	f800283a 	ret

04008b5c <__divsi3>:
 4008b5c:	20001b16 	blt	r4,zero,4008bcc <__divsi3+0x70>
 4008b60:	000f883a 	mov	r7,zero
 4008b64:	28001616 	blt	r5,zero,4008bc0 <__divsi3+0x64>
 4008b68:	200d883a 	mov	r6,r4
 4008b6c:	29001a2e 	bgeu	r5,r4,4008bd8 <__divsi3+0x7c>
 4008b70:	00800804 	movi	r2,32
 4008b74:	00c00044 	movi	r3,1
 4008b78:	00000106 	br	4008b80 <__divsi3+0x24>
 4008b7c:	10000d26 	beq	r2,zero,4008bb4 <__divsi3+0x58>
 4008b80:	294b883a 	add	r5,r5,r5
 4008b84:	10bfffc4 	addi	r2,r2,-1
 4008b88:	18c7883a 	add	r3,r3,r3
 4008b8c:	293ffb36 	bltu	r5,r4,4008b7c <_gp+0xffff76c4>
 4008b90:	0005883a 	mov	r2,zero
 4008b94:	18000726 	beq	r3,zero,4008bb4 <__divsi3+0x58>
 4008b98:	0005883a 	mov	r2,zero
 4008b9c:	31400236 	bltu	r6,r5,4008ba8 <__divsi3+0x4c>
 4008ba0:	314dc83a 	sub	r6,r6,r5
 4008ba4:	10c4b03a 	or	r2,r2,r3
 4008ba8:	1806d07a 	srli	r3,r3,1
 4008bac:	280ad07a 	srli	r5,r5,1
 4008bb0:	183ffa1e 	bne	r3,zero,4008b9c <_gp+0xffff76e4>
 4008bb4:	38000126 	beq	r7,zero,4008bbc <__divsi3+0x60>
 4008bb8:	0085c83a 	sub	r2,zero,r2
 4008bbc:	f800283a 	ret
 4008bc0:	014bc83a 	sub	r5,zero,r5
 4008bc4:	39c0005c 	xori	r7,r7,1
 4008bc8:	003fe706 	br	4008b68 <_gp+0xffff76b0>
 4008bcc:	0109c83a 	sub	r4,zero,r4
 4008bd0:	01c00044 	movi	r7,1
 4008bd4:	003fe306 	br	4008b64 <_gp+0xffff76ac>
 4008bd8:	00c00044 	movi	r3,1
 4008bdc:	003fee06 	br	4008b98 <_gp+0xffff76e0>

04008be0 <__modsi3>:
 4008be0:	20001716 	blt	r4,zero,4008c40 <__modsi3+0x60>
 4008be4:	000f883a 	mov	r7,zero
 4008be8:	2005883a 	mov	r2,r4
 4008bec:	28001216 	blt	r5,zero,4008c38 <__modsi3+0x58>
 4008bf0:	2900162e 	bgeu	r5,r4,4008c4c <__modsi3+0x6c>
 4008bf4:	01800804 	movi	r6,32
 4008bf8:	00c00044 	movi	r3,1
 4008bfc:	00000106 	br	4008c04 <__modsi3+0x24>
 4008c00:	30000a26 	beq	r6,zero,4008c2c <__modsi3+0x4c>
 4008c04:	294b883a 	add	r5,r5,r5
 4008c08:	31bfffc4 	addi	r6,r6,-1
 4008c0c:	18c7883a 	add	r3,r3,r3
 4008c10:	293ffb36 	bltu	r5,r4,4008c00 <_gp+0xffff7748>
 4008c14:	18000526 	beq	r3,zero,4008c2c <__modsi3+0x4c>
 4008c18:	1806d07a 	srli	r3,r3,1
 4008c1c:	11400136 	bltu	r2,r5,4008c24 <__modsi3+0x44>
 4008c20:	1145c83a 	sub	r2,r2,r5
 4008c24:	280ad07a 	srli	r5,r5,1
 4008c28:	183ffb1e 	bne	r3,zero,4008c18 <_gp+0xffff7760>
 4008c2c:	38000126 	beq	r7,zero,4008c34 <__modsi3+0x54>
 4008c30:	0085c83a 	sub	r2,zero,r2
 4008c34:	f800283a 	ret
 4008c38:	014bc83a 	sub	r5,zero,r5
 4008c3c:	003fec06 	br	4008bf0 <_gp+0xffff7738>
 4008c40:	0109c83a 	sub	r4,zero,r4
 4008c44:	01c00044 	movi	r7,1
 4008c48:	003fe706 	br	4008be8 <_gp+0xffff7730>
 4008c4c:	00c00044 	movi	r3,1
 4008c50:	003ff106 	br	4008c18 <_gp+0xffff7760>

04008c54 <__udivsi3>:
 4008c54:	200d883a 	mov	r6,r4
 4008c58:	2900152e 	bgeu	r5,r4,4008cb0 <__udivsi3+0x5c>
 4008c5c:	28001416 	blt	r5,zero,4008cb0 <__udivsi3+0x5c>
 4008c60:	00800804 	movi	r2,32
 4008c64:	00c00044 	movi	r3,1
 4008c68:	00000206 	br	4008c74 <__udivsi3+0x20>
 4008c6c:	10000e26 	beq	r2,zero,4008ca8 <__udivsi3+0x54>
 4008c70:	28000516 	blt	r5,zero,4008c88 <__udivsi3+0x34>
 4008c74:	294b883a 	add	r5,r5,r5
 4008c78:	10bfffc4 	addi	r2,r2,-1
 4008c7c:	18c7883a 	add	r3,r3,r3
 4008c80:	293ffa36 	bltu	r5,r4,4008c6c <_gp+0xffff77b4>
 4008c84:	18000826 	beq	r3,zero,4008ca8 <__udivsi3+0x54>
 4008c88:	0005883a 	mov	r2,zero
 4008c8c:	31400236 	bltu	r6,r5,4008c98 <__udivsi3+0x44>
 4008c90:	314dc83a 	sub	r6,r6,r5
 4008c94:	10c4b03a 	or	r2,r2,r3
 4008c98:	1806d07a 	srli	r3,r3,1
 4008c9c:	280ad07a 	srli	r5,r5,1
 4008ca0:	183ffa1e 	bne	r3,zero,4008c8c <_gp+0xffff77d4>
 4008ca4:	f800283a 	ret
 4008ca8:	0005883a 	mov	r2,zero
 4008cac:	f800283a 	ret
 4008cb0:	00c00044 	movi	r3,1
 4008cb4:	003ff406 	br	4008c88 <_gp+0xffff77d0>

04008cb8 <__umodsi3>:
 4008cb8:	2005883a 	mov	r2,r4
 4008cbc:	2900122e 	bgeu	r5,r4,4008d08 <__umodsi3+0x50>
 4008cc0:	28001116 	blt	r5,zero,4008d08 <__umodsi3+0x50>
 4008cc4:	01800804 	movi	r6,32
 4008cc8:	00c00044 	movi	r3,1
 4008ccc:	00000206 	br	4008cd8 <__umodsi3+0x20>
 4008cd0:	30000c26 	beq	r6,zero,4008d04 <__umodsi3+0x4c>
 4008cd4:	28000516 	blt	r5,zero,4008cec <__umodsi3+0x34>
 4008cd8:	294b883a 	add	r5,r5,r5
 4008cdc:	31bfffc4 	addi	r6,r6,-1
 4008ce0:	18c7883a 	add	r3,r3,r3
 4008ce4:	293ffa36 	bltu	r5,r4,4008cd0 <_gp+0xffff7818>
 4008ce8:	18000626 	beq	r3,zero,4008d04 <__umodsi3+0x4c>
 4008cec:	1806d07a 	srli	r3,r3,1
 4008cf0:	11400136 	bltu	r2,r5,4008cf8 <__umodsi3+0x40>
 4008cf4:	1145c83a 	sub	r2,r2,r5
 4008cf8:	280ad07a 	srli	r5,r5,1
 4008cfc:	183ffb1e 	bne	r3,zero,4008cec <_gp+0xffff7834>
 4008d00:	f800283a 	ret
 4008d04:	f800283a 	ret
 4008d08:	00c00044 	movi	r3,1
 4008d0c:	003ff706 	br	4008cec <_gp+0xffff7834>

04008d10 <__mulsi3>:
 4008d10:	0005883a 	mov	r2,zero
 4008d14:	20000726 	beq	r4,zero,4008d34 <__mulsi3+0x24>
 4008d18:	20c0004c 	andi	r3,r4,1
 4008d1c:	2008d07a 	srli	r4,r4,1
 4008d20:	18000126 	beq	r3,zero,4008d28 <__mulsi3+0x18>
 4008d24:	1145883a 	add	r2,r2,r5
 4008d28:	294b883a 	add	r5,r5,r5
 4008d2c:	203ffa1e 	bne	r4,zero,4008d18 <_gp+0xffff7860>
 4008d30:	f800283a 	ret
 4008d34:	f800283a 	ret

04008d38 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 4008d38:	deffff04 	addi	sp,sp,-4
 4008d3c:	01010074 	movhi	r4,1025
 4008d40:	01410074 	movhi	r5,1025
 4008d44:	dfc00015 	stw	ra,0(sp)
 4008d48:	2124f604 	addi	r4,r4,-27688
 4008d4c:	29653204 	addi	r5,r5,-27448

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 4008d50:	2140061e 	bne	r4,r5,4008d6c <alt_load+0x34>
 4008d54:	01010074 	movhi	r4,1025
 4008d58:	01410074 	movhi	r5,1025
 4008d5c:	21200804 	addi	r4,r4,-32736
 4008d60:	29600804 	addi	r5,r5,-32736
 4008d64:	2140121e 	bne	r4,r5,4008db0 <alt_load+0x78>
 4008d68:	00000b06 	br	4008d98 <alt_load+0x60>
 4008d6c:	00c10074 	movhi	r3,1025
 4008d70:	18e53204 	addi	r3,r3,-27448
 4008d74:	1907c83a 	sub	r3,r3,r4
 4008d78:	0005883a 	mov	r2,zero
  {
    while( to != end )
 4008d7c:	10fff526 	beq	r2,r3,4008d54 <_gp+0xffff789c>
    {
      *to++ = *from++;
 4008d80:	114f883a 	add	r7,r2,r5
 4008d84:	39c00017 	ldw	r7,0(r7)
 4008d88:	110d883a 	add	r6,r2,r4
 4008d8c:	10800104 	addi	r2,r2,4
 4008d90:	31c00015 	stw	r7,0(r6)
 4008d94:	003ff906 	br	4008d7c <_gp+0xffff78c4>
 4008d98:	01010074 	movhi	r4,1025
 4008d9c:	01410074 	movhi	r5,1025
 4008da0:	2123d104 	addi	r4,r4,-28860
 4008da4:	2963d104 	addi	r5,r5,-28860

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 4008da8:	2140101e 	bne	r4,r5,4008dec <alt_load+0xb4>
 4008dac:	00000b06 	br	4008ddc <alt_load+0xa4>
 4008db0:	00c10074 	movhi	r3,1025
 4008db4:	18e00804 	addi	r3,r3,-32736
 4008db8:	1907c83a 	sub	r3,r3,r4
 4008dbc:	0005883a 	mov	r2,zero
  {
    while( to != end )
 4008dc0:	10fff526 	beq	r2,r3,4008d98 <_gp+0xffff78e0>
    {
      *to++ = *from++;
 4008dc4:	114f883a 	add	r7,r2,r5
 4008dc8:	39c00017 	ldw	r7,0(r7)
 4008dcc:	110d883a 	add	r6,r2,r4
 4008dd0:	10800104 	addi	r2,r2,4
 4008dd4:	31c00015 	stw	r7,0(r6)
 4008dd8:	003ff906 	br	4008dc0 <_gp+0xffff7908>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 4008ddc:	4008f340 	call	4008f34 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 4008de0:	dfc00017 	ldw	ra,0(sp)
 4008de4:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 4008de8:	4008f381 	jmpi	4008f38 <alt_icache_flush_all>
 4008dec:	00c10074 	movhi	r3,1025
 4008df0:	18e4f604 	addi	r3,r3,-27688
 4008df4:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 4008df8:	0005883a 	mov	r2,zero
  {
    while( to != end )
 4008dfc:	18bff726 	beq	r3,r2,4008ddc <_gp+0xffff7924>
    {
      *to++ = *from++;
 4008e00:	114f883a 	add	r7,r2,r5
 4008e04:	39c00017 	ldw	r7,0(r7)
 4008e08:	110d883a 	add	r6,r2,r4
 4008e0c:	10800104 	addi	r2,r2,4
 4008e10:	31c00015 	stw	r7,0(r6)
 4008e14:	003ff906 	br	4008dfc <_gp+0xffff7944>

04008e18 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 4008e18:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 4008e1c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 4008e20:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 4008e24:	4008edc0 	call	4008edc <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 4008e28:	4008efc0 	call	4008efc <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 4008e2c:	d1a04117 	ldw	r6,-32508(gp)
 4008e30:	d1604217 	ldw	r5,-32504(gp)
 4008e34:	d1204317 	ldw	r4,-32500(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 4008e38:	dfc00017 	ldw	ra,0(sp)
 4008e3c:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 4008e40:	400805c1 	jmpi	400805c <main>

04008e44 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
 4008e44:	defffe04 	addi	sp,sp,-8
 4008e48:	dc000015 	stw	r16,0(sp)
 4008e4c:	dfc00115 	stw	ra,4(sp)
 4008e50:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 4008e54:	4008ae80 	call	4008ae8 <strlen>
 4008e58:	01010074 	movhi	r4,1025
 4008e5c:	000f883a 	mov	r7,zero
 4008e60:	100d883a 	mov	r6,r2
 4008e64:	800b883a 	mov	r5,r16
 4008e68:	21253004 	addi	r4,r4,-27456
#else
    return fputs(str, stdout);
#endif
#endif
}
 4008e6c:	dfc00117 	ldw	ra,4(sp)
 4008e70:	dc000017 	ldw	r16,0(sp)
 4008e74:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 4008e78:	4008f001 	jmpi	4008f00 <altera_avalon_jtag_uart_write>

04008e7c <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
 4008e7c:	00800044 	movi	r2,1
 4008e80:	20800226 	beq	r4,r2,4008e8c <write+0x10>
 4008e84:	00800084 	movi	r2,2
 4008e88:	2080041e 	bne	r4,r2,4008e9c <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
 4008e8c:	01010074 	movhi	r4,1025
 4008e90:	000f883a 	mov	r7,zero
 4008e94:	21253004 	addi	r4,r4,-27456
 4008e98:	4008f001 	jmpi	4008f00 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
 4008e9c:	d0a00317 	ldw	r2,-32756(gp)
 4008ea0:	10000926 	beq	r2,zero,4008ec8 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 4008ea4:	deffff04 	addi	sp,sp,-4
 4008ea8:	dfc00015 	stw	ra,0(sp)
 4008eac:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
 4008eb0:	00c01444 	movi	r3,81
 4008eb4:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
 4008eb8:	00bfffc4 	movi	r2,-1
 4008ebc:	dfc00017 	ldw	ra,0(sp)
 4008ec0:	dec00104 	addi	sp,sp,4
 4008ec4:	f800283a 	ret
 4008ec8:	d0a04004 	addi	r2,gp,-32512
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
 4008ecc:	00c01444 	movi	r3,81
 4008ed0:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
 4008ed4:	00bfffc4 	movi	r2,-1
 4008ed8:	f800283a 	ret

04008edc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 4008edc:	deffff04 	addi	sp,sp,-4
 4008ee0:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 4008ee4:	4008f3c0 	call	4008f3c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 4008ee8:	00800044 	movi	r2,1
 4008eec:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 4008ef0:	dfc00017 	ldw	ra,0(sp)
 4008ef4:	dec00104 	addi	sp,sp,4
 4008ef8:	f800283a 	ret

04008efc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4008efc:	f800283a 	ret

04008f00 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 4008f00:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 4008f04:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
 4008f08:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 4008f0c:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 4008f10:	2980072e 	bgeu	r5,r6,4008f30 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 4008f14:	38c00037 	ldwio	r3,0(r7)
 4008f18:	18ffffec 	andhi	r3,r3,65535
 4008f1c:	183ffc26 	beq	r3,zero,4008f10 <_gp+0xffff7a58>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 4008f20:	28c00007 	ldb	r3,0(r5)
 4008f24:	20c00035 	stwio	r3,0(r4)
 4008f28:	29400044 	addi	r5,r5,1
 4008f2c:	003ff806 	br	4008f10 <_gp+0xffff7a58>

  return count;
}
 4008f30:	f800283a 	ret

04008f34 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 4008f34:	f800283a 	ret

04008f38 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 4008f38:	f800283a 	ret

04008f3c <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 4008f3c:	000170fa 	wrctl	ienable,zero
 4008f40:	f800283a 	ret
