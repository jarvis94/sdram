--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone IV E" LPM_DECODES=16 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 16.1 cbx_cycloneii 2016:10:19:21:26:20:SJ cbx_lpm_add_sub 2016:10:19:21:26:20:SJ cbx_lpm_compare 2016:10:19:21:26:20:SJ cbx_lpm_decode 2016:10:19:21:26:20:SJ cbx_mgl 2016:10:19:22:10:30:SJ cbx_nadder 2016:10:19:21:26:20:SJ cbx_stratix 2016:10:19:21:26:20:SJ cbx_stratixii 2016:10:19:21:26:20:SJ  VERSION_END


-- Copyright (C) 2016  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel MegaCore Function License Agreement, or other 
--  applicable license agreement, including, without limitation, 
--  that your use is for the sole purpose of programming logic 
--  devices manufactured by Intel and sold by Intel or its 
--  authorized distributors.  Please refer to the applicable 
--  agreement for further details.



--synthesis_resources = lut 18 
SUBDESIGN decode_bua
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[15..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[15..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode5234w[1..0]	: WIRE;
	w_anode5243w[3..0]	: WIRE;
	w_anode5260w[3..0]	: WIRE;
	w_anode5270w[3..0]	: WIRE;
	w_anode5280w[3..0]	: WIRE;
	w_anode5290w[3..0]	: WIRE;
	w_anode5300w[3..0]	: WIRE;
	w_anode5310w[3..0]	: WIRE;
	w_anode5320w[3..0]	: WIRE;
	w_anode5332w[1..0]	: WIRE;
	w_anode5339w[3..0]	: WIRE;
	w_anode5350w[3..0]	: WIRE;
	w_anode5360w[3..0]	: WIRE;
	w_anode5370w[3..0]	: WIRE;
	w_anode5380w[3..0]	: WIRE;
	w_anode5390w[3..0]	: WIRE;
	w_anode5400w[3..0]	: WIRE;
	w_anode5410w[3..0]	: WIRE;
	w_data5232w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[15..0] = eq_wire[15..0];
	eq_wire[] = ( ( w_anode5410w[3..3], w_anode5400w[3..3], w_anode5390w[3..3], w_anode5380w[3..3], w_anode5370w[3..3], w_anode5360w[3..3], w_anode5350w[3..3], w_anode5339w[3..3]), ( w_anode5320w[3..3], w_anode5310w[3..3], w_anode5300w[3..3], w_anode5290w[3..3], w_anode5280w[3..3], w_anode5270w[3..3], w_anode5260w[3..3], w_anode5243w[3..3]));
	w_anode5234w[] = ( (w_anode5234w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode5243w[] = ( (w_anode5243w[2..2] & (! w_data5232w[2..2])), (w_anode5243w[1..1] & (! w_data5232w[1..1])), (w_anode5243w[0..0] & (! w_data5232w[0..0])), w_anode5234w[1..1]);
	w_anode5260w[] = ( (w_anode5260w[2..2] & (! w_data5232w[2..2])), (w_anode5260w[1..1] & (! w_data5232w[1..1])), (w_anode5260w[0..0] & w_data5232w[0..0]), w_anode5234w[1..1]);
	w_anode5270w[] = ( (w_anode5270w[2..2] & (! w_data5232w[2..2])), (w_anode5270w[1..1] & w_data5232w[1..1]), (w_anode5270w[0..0] & (! w_data5232w[0..0])), w_anode5234w[1..1]);
	w_anode5280w[] = ( (w_anode5280w[2..2] & (! w_data5232w[2..2])), (w_anode5280w[1..1] & w_data5232w[1..1]), (w_anode5280w[0..0] & w_data5232w[0..0]), w_anode5234w[1..1]);
	w_anode5290w[] = ( (w_anode5290w[2..2] & w_data5232w[2..2]), (w_anode5290w[1..1] & (! w_data5232w[1..1])), (w_anode5290w[0..0] & (! w_data5232w[0..0])), w_anode5234w[1..1]);
	w_anode5300w[] = ( (w_anode5300w[2..2] & w_data5232w[2..2]), (w_anode5300w[1..1] & (! w_data5232w[1..1])), (w_anode5300w[0..0] & w_data5232w[0..0]), w_anode5234w[1..1]);
	w_anode5310w[] = ( (w_anode5310w[2..2] & w_data5232w[2..2]), (w_anode5310w[1..1] & w_data5232w[1..1]), (w_anode5310w[0..0] & (! w_data5232w[0..0])), w_anode5234w[1..1]);
	w_anode5320w[] = ( (w_anode5320w[2..2] & w_data5232w[2..2]), (w_anode5320w[1..1] & w_data5232w[1..1]), (w_anode5320w[0..0] & w_data5232w[0..0]), w_anode5234w[1..1]);
	w_anode5332w[] = ( (w_anode5332w[0..0] & data_wire[3..3]), enable_wire);
	w_anode5339w[] = ( (w_anode5339w[2..2] & (! w_data5232w[2..2])), (w_anode5339w[1..1] & (! w_data5232w[1..1])), (w_anode5339w[0..0] & (! w_data5232w[0..0])), w_anode5332w[1..1]);
	w_anode5350w[] = ( (w_anode5350w[2..2] & (! w_data5232w[2..2])), (w_anode5350w[1..1] & (! w_data5232w[1..1])), (w_anode5350w[0..0] & w_data5232w[0..0]), w_anode5332w[1..1]);
	w_anode5360w[] = ( (w_anode5360w[2..2] & (! w_data5232w[2..2])), (w_anode5360w[1..1] & w_data5232w[1..1]), (w_anode5360w[0..0] & (! w_data5232w[0..0])), w_anode5332w[1..1]);
	w_anode5370w[] = ( (w_anode5370w[2..2] & (! w_data5232w[2..2])), (w_anode5370w[1..1] & w_data5232w[1..1]), (w_anode5370w[0..0] & w_data5232w[0..0]), w_anode5332w[1..1]);
	w_anode5380w[] = ( (w_anode5380w[2..2] & w_data5232w[2..2]), (w_anode5380w[1..1] & (! w_data5232w[1..1])), (w_anode5380w[0..0] & (! w_data5232w[0..0])), w_anode5332w[1..1]);
	w_anode5390w[] = ( (w_anode5390w[2..2] & w_data5232w[2..2]), (w_anode5390w[1..1] & (! w_data5232w[1..1])), (w_anode5390w[0..0] & w_data5232w[0..0]), w_anode5332w[1..1]);
	w_anode5400w[] = ( (w_anode5400w[2..2] & w_data5232w[2..2]), (w_anode5400w[1..1] & w_data5232w[1..1]), (w_anode5400w[0..0] & (! w_data5232w[0..0])), w_anode5332w[1..1]);
	w_anode5410w[] = ( (w_anode5410w[2..2] & w_data5232w[2..2]), (w_anode5410w[1..1] & w_data5232w[1..1]), (w_anode5410w[0..0] & w_data5232w[0..0]), w_anode5332w[1..1]);
	w_data5232w[2..0] = data_wire[2..0];
END;
--VALID FILE
